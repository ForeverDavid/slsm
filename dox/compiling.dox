/**
\page Compiling Compiling & Linking

\section Compiling-Compiling Compiling using CMake

LibSLSM is intended to be used on a
<a href="https://en.wikipedia.org/wiki/Unix-like">Unix-like</a>
operating system and has been extensively tested on macOS (formerly OS X) and
Linux. Windows users are advised to use the Ubuntu Bash shell on Windows 10,
or <a href="http://www.mingw.org">MinGW</a> to build LibSLSM. For modern,
64-bit Windows systems, we recommend using <a href="http://msys2.github.io">MSYS2</a>.
This has been used to successfully build LibSLSM on Windows 7 and 10. After
installing MSYS2 (following the instructions on the <a href="http://msys2.github.io">website</a>)
you will need to install several additional packages:

\code
pacman -S cmake gcc git make python3
\endcode

\section Compiling-Downloading Getting the code

-# Clone the LibSLSM source via:
\code
git clone --recursive https://github.com/lohedges/slsm.git
\endcode

(Alternatively, a zip file can be downloaded from
<a href="https://github.com/lohedges/slsm/archive/master.zip">here</a>.
Note, however, that you'll need to download the \ref Compiling-Dependencies separately.)

Compiling and Installing
-# Change to the newly created `slsm` directory:
\code
cd slsm
\endcode
-# Creata fresh build directory:
\code
mkdir build
cd build
\endcode
(This is recommended, although in source builds are allowed.)
-# Configure, build, and install:
\code
cmake .. && make -j4 install
\endcode
(Note that there is no need to install the library in order to use it. You
can always build locally and link against the library using whatever path
is appropriate.)

\section Compiling-Linking Linking with C/C++

To use LibSLSM with a C/C++ code first include the library header file
in the code.

\code
//example.cpp
#include <slsm/slsm.h>
\endcode

Then to compile, we can use something like the following:
\code
g++ -std=c++11 example.cpp -lslsm -lnlopt
\endcode

This assumes that we have used the default install location `/usr/local/`. If
we specify an install location, we would use a command more like the following:
\code
g++ -std=c++11 example.cpp -I/my/path/include -L/my/path/lib -lslsm -lnlopt
\endcode

Note that the `-std=c++11` compiler flag is needed for `std::function` and `std::random`.

\section Compiling-Dependencies External Dependencies
To aid portability, dependencies are handled via git
<a href="https://git-scm.com/book/en/v2/Git-Tools-Submodules">submodules</a>.
If you are using LibSLSM for the first time, and didn't clone using the `--recursive` flag,
then you'll need to initialise the submodules:

\code
git submodule update --init --recursive
\endcode

Existing submodules can be updated using:

\code
git submodule update --recursive
\endcode

Brief details of the submodules are given below:

-# The Optimise class makes use of <a href="http://ab-initio.mit.edu/wiki/index.php/NLopt">NLopt</a>.

-# Python bindings are generated using <a href="https://github.com/pybind/pybind11">pybind11</a>.

*/
