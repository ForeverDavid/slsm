/**
\page Demos Demos

Several example codes illustrate how to interface with LibSLSM, provide tests
of various components of the algorithm, and reproduce the data in the
<a href="https://arxiv.org">paper</a>:

- \subpage Demos-AreaMinimisation
- \subpage Demos-PerimeterMinimisation
- \subpage Demos-ConstrainedPerimeterMinimisation
- \subpage Demos-ShapeMatching
- \subpage Demos-Dumbbell

\page Demos-AreaMinimisation Area Minimisation

Area minimisation provides a simple means of checking that our level set
optimisation algorithm is working correctly. For this problem all boundary
point sensitivities are simply one, regardless of the shape of the interface.
As such, the interface should move at a constant unit velocity. The demo tests
this assertion by initialising the level set with a single circular interface
centred in the middle of the domain, then minimising the area enclosed by the
circle. By measuring the radius of the circle at each iteration of the
algorithm it is possible to calculate the distance that the interface moves
as a function of time. As expected, the circle shrinks at a constant unit
velocity.

<img width="800" src="https://raw.githubusercontent.com/lohedges/assets/master/slsm/animations/minimise_area.gif" alt="Area minimisation.">

The source code for this demo can be found in minimise_area.cpp

\page Demos-PerimeterMinimisation Perimeter Minimisation

To test that the \ref Classes-Sensitivity class is working correctly we
conduct a simple perimeter minimisation study. Here boundary point
sensitivities measure the local rate of change in perimeter for a movement
of the boundary in the normal direction. This sensitivity should measure the
local curvature of the interface, hence the shape should shrink with a velocity
proportional to its mean curvature. To check this we choose to minimise the
perimeter of a circle, since the symmetry of the shape simplifies the problem.
At each iteration of the algorithm we compare the interface velocity, the
average boundary point sensitivity (an estimate of the mean curvature), and
the inverse radius of the circle (the analytical curvature). The three time
series show excellent agreement.

<img width="800" src="https://raw.githubusercontent.com/lohedges/assets/master/slsm/animations/minimise_perimeter.gif" alt="Perimeter minimisation.">

The source code for this demo can be found in minimise_perimeter.cpp

\page Demos-ConstrainedPerimeterMinimisation Constrained Perimeter Minimisation

To test that the \ref Classes-Optimise class is correctly handling constraints
and that our stochastic level set algorithm is sampling the correct thermal
distribution we perform perimeter minimisation with a lower bound on the area.
Starting from a square interface that encloses an area in excess of the constraint
we should see convergence to a fluctuating circular interface at lying on the
constraint manifold. By running many long and independent simulations we can
compute the distribution of the boundary perimeter at different temperatures,
allowing us to confirm that we indeed sample the correct equilibrium
distribution.

<img width="800" src="https://raw.githubusercontent.com/lohedges/assets/master/slsm/animations/minimise_perimeter_constrained.gif" alt="Constrained Perimeter minimisation.">

The source code for this demo can be found in minimise_perimeter_constrained.cpp

\page Demos-ShapeMatching Shape Matching

A fun test of the optimisation algorithm is to perform shape matching
simulations using a predefined target interface. Unlike \ref
Demos-PerimeterMinimisation, shape matching simulations converge to a steady
state in the absence of a constraint. Boundary point sensitivities are trivial
to calculate and indicate the direction that boundary needs to move in order
to increase or decrease the area around a boundary point, thus reducing the
mismatch with the target. The animation below shows a circle converging towards
a piecewise linear representation of the
<a href="https://en.wikipedia.org/wiki/Stanford_bunny"> Stanford Bunny</a>.

<img width="800" src="https://raw.githubusercontent.com/lohedges/assets/master/slsm/animations/shape_match.gif" alt="Shape Matching.">

The source code for this demo can be found in shape_match.cpp

\page Demos-Dumbbell Dumbbell

As a means of demonstrating the utility the stochastic level-set method we
construct a simple problem that exhibits a non-convex objective function.
Here we aim to minimise the perimeter and height of a shape, subject to a
\ref Demos-ShapeMatching constraint with a target design (the difference in
the area enclosed by the two shapes must be below a threshold). The target
shape (shown as blue in the animations below) is a dumbbell, formed from the
union of two vertically offset, overlapping circles. The level set is then
initialised using a small circle centred in the upper lobe of the dumbbell.
To reach the global minimum, the circle (shown in red) must descend, passing
through the neck of the dumbbell on its way. Doing so requires a significant
deformation to the interface, causing an increase in its perimeter and the
objective function. In the absence of any noise, the system is trapped in a
local minimum and the shape remains stuck in the dumbbell's neck.

<img width="800" src="https://raw.githubusercontent.com/lohedges/assets/master/slsm/animations/dumbbell.gif" alt="Dumbbell.">

In contrast, the addition of a small amount of thermal noise allows the system
to escape the local minimum. Eventually the shape advances through the neck of
the dumbbell and reaches the global minimum at the bottom of the lower lobe.

<img width="800" src="https://raw.githubusercontent.com/lohedges/assets/master/slsm/animations/dumbbell_noise.gif" alt="Noisy Dumbbell.">

The source code for this demo can be found in dumbbell.cpp

*/
